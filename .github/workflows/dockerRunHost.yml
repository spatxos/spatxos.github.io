name: Build Docker Image Run Host

on:
  push:
    tags:
      - "docker-v*.*.*"  # 后面每次更新提交，只有打上tag之后才会进行发布更新，减少actions执行次数
  workflow_dispatch:

jobs:
  build:
    env:
      CNBLOGS_ISDOWN: ${{secrets.CNBLOGS_ISDOWN}}
      CNBLOGS_COOKIE: ${{secrets.CNBLOGS_COOKIE}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.15.0'

      - name: Set up Go 1.18.3
        if: ${{ env.CNBLOGS_ISDOWN == 'true' }}  # 是否从博客园下载，可通过更改CNBLOGS_ISDOWN的值进行提交时的下载控制
        uses: actions/setup-go@v1
        with:
          go-version: 1.18.3
        id: go
      - name: Pull blogs from cnblogs
        if: ${{ env.CNBLOGS_ISDOWN == 'true' }}  # 是否从博客园下载，可通过更改CNBLOGS_ISDOWN的值进行提交时的下载控制
        run: |
          cd source/_posts/
          go run downmyblogs.go -cookie ${{env.CNBLOGS_COOKIE}}

      - name: Setup Hexo
        run: |
          npm install hexo-cli -g
          npm install hexo-generator-search --save
          npm install hexo-generator-feed --save
          npm i hexo-wordcount
          npm install
      # get image tag name
      - name: Get Image Tag Name
        run: |
          if [ x${{ github.event.inputs.tag }} == x"" ]; then
            echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
      - name: Login to Aliyun Container Registry (ACR)
        uses: aliyun/acr-login@v1
        with:
          login-server: "${{ secrets.DOCKER_REGISTRY }}"
          region-id: "${{ secrets.DOCKER_REGISTRY_REGION }}"  # 3
          username: "${{ secrets.DOCKER_USERNAME }}"
          password: "${{ secrets.DOCKER_PASSWORD }}"
      - name: Deploy and Build Image
        run: |
          hexo clean
          hexo deploy
          docker build -t "${{ secrets.DOCKER_REGISTRY }}/${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog:${{env.TAG_NAME}}" -f Dockerfile .
      - name: Push Image
        run: |
          docker images
          docker push "${{ secrets.DOCKER_REGISTRY }}/${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog:${{env.TAG_NAME}}"

  # Docker 自动部署
  deploy-docker: 
    needs: [build]
    name: Deploy Docker
    runs-on: ubuntu-latest
    steps:
      # get image tag name
      - name: Get Image Tag Name
        run: |
          if [ x${{ github.event.inputs.tag }} == x"" ]; then
            echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }} # 服务器ip
          username: ${{ secrets.HOST_USERNAME }} # 服务器登录用户名
          password: ${{ secrets.HOST_PASSWORD }} # 服务器登录密码
          port: ${{ secrets.HOST_PORT }} # 服务器ssh端口
          script: |
            docker info
            echo $(docker ps -aqf "name=${{secrets.BLOG_NAME}}-blog")
            docker stop $(docker ps -aqf "name=${{secrets.BLOG_NAME}}-blog")
            docker container rm ${{secrets.BLOG_NAME}}-blog
            docker rmi ${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog
            docker image rm `docker images --format='{{.Repository}}:{{.Tag}}' --filter reference=${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog*:*`
            echo 查看是否成功删除${{secrets.BLOG_NAME}}-blog
            docker ps -a
            echo 从harbor拉取docker镜像
            mkdir /root/${{secrets.BLOG_NAME}}-blog/html/
            chmod 777 /root/${{secrets.BLOG_NAME}}-blog/html/
            docker pull ${{ secrets.DOCKER_REGISTRY }}/${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog:${{env.TAG_NAME}}
            docker tag ${{ secrets.DOCKER_REGISTRY }}/${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog:${{env.TAG_NAME}} ${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog:${{env.TAG_NAME}}
            docker run -it --rm -d -p 800:80 --name ${{secrets.BLOG_NAME}}-blog ${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog:${{env.TAG_NAME}}
            rm -rf /root/${{secrets.BLOG_NAME}}-blog/html/*
            docker cp -rf ${{secrets.BLOG_NAME}}-blog:/usr/share/nginx/html/ /root/${{secrets.BLOG_NAME}}-blog/
            docker system prune -f
            docker stop $(docker ps -aqf "name=${{secrets.BLOG_NAME}}-blog")
            docker container rm ${{secrets.BLOG_NAME}}-blog
            docker image rm `docker images --format='{{.Repository}}:{{.Tag}}' --filter reference=${{secrets.DOCKER_REGISTRY}}/${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog*:*`
            docker image rm `docker images --format='{{.Repository}}:{{.Tag}}' --filter reference=${{secrets.BLOG_NAME}}/${{secrets.BLOG_NAME}}-blog*:*`
            echo docker容器启动成功


